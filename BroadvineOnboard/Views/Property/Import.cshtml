@model BroadvineOnboard.Models.PropertyViewModel

@{
    ViewBag.Title = "Import";
}

<h2>Import Property Spreadsheet</h2>

@using (Html.BeginForm("Sheet", "Property", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ClientID, new { htmlAttributes = new { @class = "form-control" } })

        <div class="form-group">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                
                <select class="property-field" name="Code"></select>
                @*@Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })*@
               
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="Name" ></select>
                @*@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="Address1" ></select>

                @*@Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="Address2" ></select>

                @*@Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="City" ></select>

                @*@Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="State" ></select>

                @*@Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="PostalCode" ></select>
                @*@Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AreaName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="AreaName" ></select>
                @*@Html.DropDownList("AreaID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AreaID, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalRooms, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="TotalRooms" ></select>
                @*@Html.EditorFor(model => model.TotalRooms, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TotalRooms, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.URL, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="URL" ></select>
                @*@Html.EditorFor(model => model.URL, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.URL, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="Phone" ></select>
                @*@Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="Email" ></select>
                @*@Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <hr />


        <div class="form-group">
            @Html.LabelFor(model => model.BrandCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="BrandCode" ></select>
                @*@Html.EditorFor(model => model.BrandCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BrandCode, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SmithTravelCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="SmithTravelCode" ></select>
                @*@Html.EditorFor(model => model.SmithTravelCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SmithTravelCode, "", new { @class = "text-danger" })*@
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FoodAndBeverage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="checkbox" name="FoodAndBeverage" style="margin: 10px 0 0" />
                @*<div class="checkbox">
                    @Html.EditorFor(model => model.FoodAndBeverage)
                    @Html.ValidationMessageFor(model => model.FoodAndBeverage, "", new { @class = "text-danger" })
                </div>*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="ServiceType" ></select>
                @*@Html.EnumDropDownListFor(model => model.ServiceType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ServiceType, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StatusType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="StatusType" ></select>
                @*@Html.EnumDropDownListFor(model => model.StatusType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StatusType, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RelationshipType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="RelationshipType" ></select>
                @*@Html.EnumDropDownListFor(model => model.RelationshipType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RelationshipType, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="CompanyName" ></select>
                @*@Html.DropDownList("CompanyID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CompanyID, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaturityType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="MaturityType" />
                @*@Html.EnumDropDownListFor(model => model.MaturityType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MaturityType, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CalendarType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="property-field" name="CalendarType" />
                @*@Html.EnumDropDownListFor(model => model.CalendarType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CalendarType, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Import" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>
    $(document).ready(function() {

        $(".property-field").kendoDropDownList({
            dataTextField: "Text",
            dataValueField: "Value",
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("GetPropertiesFromClient", "Property")",
                        data: { Id: @Model.ClientID }
                    }
                }
            },
            dataBound: adjustDropDownWidth
        });

        function adjustDropDownWidth(e) {
            e.sender.unbind("dataBound");
            var listContainer = e.sender.list.closest(".k-list-container");
            listContainer.width(listContainer.width() + kendo.support.scrollbar() + 10);
            $(".property-field").css("width", listContainer.width() + 6);
        } 
    });
</script>
