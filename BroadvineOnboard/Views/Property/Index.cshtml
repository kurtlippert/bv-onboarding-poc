@model IEnumerable<BroadvineOnboard.Models.Property>

@{
    ViewBag.Title = "Index";
}

<h2>Property Listing</h2>

@using (Html.BeginForm("Index", "Property", FormMethod.Post, new { ng_app = "ob", ng_controller = "WizardHostController as hostVm", enctype = "multipart/form-data" }))
{
    <span class="left">
        @Html.ActionLink("Create New Property", "Create")
        &nbsp;or&nbsp;
        <label for="file" style="display:inline-block;">Upload spreadsheet:</label> &nbsp;
        <input type="file" onchange="angular.element(this).scope().hostVm.fileChanged(this)" name="file" id="file" style="display:inline-block;" />

        <span kendo-window="hostVm.popupWizard" k-options="hostVm.options"></span>
    </span>

    <input type="submit" value="Upload" class="k-button" />

    <button type="button" kendo-button ng-click="hostVm.show()">Wizard</button>

    <p></p>

    <span class="right">
        @ViewBag.Error
    </span>

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Code)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address1)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.State)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PostalCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Area.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalRooms)
            </th>
            <th></th>
        </tr>

    @foreach (var item in Model)
    {
        <tr>

            <td>
                @Html.DisplayFor(modelItem => item.Code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address1)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.State)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PostalCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Area.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalRooms)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
    }

    </table>
}

<script>
    (function () {
        angular.module("ob", ["kendo.directives", "ngRoute"]);

        //angular
        //    .module("ob")
        //    .directive("fileInput", fileInput);

        //fileInput.$inject = ['$parse'];

        //function fileInput($parse) {
        //    return {
        //        restrict: 'A',
        //        link: function (scope, elm, attr) {
        //            elm.bind('change', function () {
        //                $parse(scope, elm[0].file)
        //                .assign()
        //            })
        //        }
        //    }
        //}

        angular
            .module("ob")
            .controller("WizardHostController", WizardHostController);

        function WizardHostController() {
            var vm = this;
            vm.file = {};

            vm.fileChanged = function (element) {
                vm.file = element.files[0];
            }

            vm.options = {
                title: "title",
                modal: true,
                width: "300",
                height: "200",
                resizable: false,
                visible: false
            };

            vm.show = function () {
                var data = new FormData();
                data.append("file", vm.file);

                var opts = {
                    url: "@Url.Action("Wizard", "Property")",
                    data: data,
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    success: function (callback) {
                        if (!callback.startsWith("<!DOCTYPE")) {
                            vm.popupWizard.center();
                            vm.popupWizard.open();
                        }
                        else {
                            if (!window.location.href.endsWith("?msg=The%20file%20contained%20no%20data.")) {
                                window.location.href = window.location.href + "?msg=The%20file%20contained%20no%20data.";
                            }
                        }
                    }
                };

                if (data.fake) {
                    // Make sure no text encoding stuff is done by xhr
                    opts.xhr = function () { var xhr = $.ajaxSettings.xhr(); xhr.send = xhr.sendAsBinary; return xhr; }
                    opts.contentType = "multipart/form-data; boundary=" + data.boundary;
                    opts.data = data.toString();
                }

                vm.popupWizard.refresh(opts);
            };
        }
    })();
</script>